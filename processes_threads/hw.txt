'''
HW1
Реализовать указанные функции:

def process_count(username: str) -> int:
    # к-во процессов, запущенных из-под текущего пользователя
    pass

def total_memory_usage(root_pid: int) -> int:
    # суммарное потребление памяти древа процессов
    pass


# При выполеннии этого задания вы можете воспользоваться чтением /proc FS или любым другим способом
'''

#############################################################################
import threading
import time
sem = threading.Semaphore()

def fun1():
    while True:
        sem.acquire()
        print(1)
        sem.release()
        time.sleep(0.25)

def fun2():
    while True:
        sem.acquire()
        print(2)
        sem.release()
        time.sleep(0.25)

t1 = threading.Thread(target = fun1)
t1.start()
t2 = threading.Thread(target = fun2)
t2.start()

'''
HW2: сделать так, чтобы
1) указанный скрипт можно было бы прервать по Ctrl+C
2) t1 и t2 корректно завершились, закрыв (возможные) открытые файлы и тд

Задание будет проверятся путём запуска программы в консоли интерпретатора, после чего (в данной консоли) будет нажиматься Ctrl+C
'''
#############################################################################

'''
HW3
1) Реализовать классический fork сервер на python.
2) Измерить прирост производительности за счёт распараллеливания по процессам, относительно однопоточного решения.
'''

def main_server_function(port: int = 8000, num_of_workers: int = 2):
    '''
    :param port : port number to accept the incoming requests
    :param num_of_workers : number of workers to handle the requests
    '''
    pass



'''
Подсказки
В презентации был дан пример функции
def io_bound_thread_1(port):
    s = socket(AF_INET, SOCK_DGRAM)
    s.bind(('', port))
    while True:
        msg, addr = s.recvfrom(1024)
        s.sendto(msg, addr)

которая висела на порту port, читала UDP дейтаграммы.

Функция main_server_function должна будет прослушивать порт port (TCP протокол)
Пришедший TCP пакет будет содержать число

Ваш сервер должен будет посчитать факториал от этого числа и передать в ответ md5 hash от строки, содержащей десятичную запись факториала числа.

Для хоть какого-то распараллеливания работы рекомендую использовать prefork
	https://gist.github.com/fuentesjr/240063
или же делать fork после accept

Для оценки производительности сравните, насколько реализания с многопоточностью работает быстрее в вашем варианте, чем в варианте без многопоточности.

Небольшой отчёт с сравнением производитености решений будет вам плюсом.
'''
