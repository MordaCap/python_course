1) Установить себе Postgres в докер. Написать docker-compose файл для разворачивания контейнера
Проверка будет осуществляться через docker-compose up -d
* Принимается так же создание docker контейнера через просто вызов docker с передачей аргументов.
	В таком случае в вашем репо д.б. .sh скрипт а-ля runme.sh
################################################################################################################################################
2) Добиться того, что миграции, лежащие рядом с домашней работой последовательно применятся к схеме БД.
Проверка будет осуществляться проверкой схемы БД "руками"

* Обратите внимание, некоторые миграции содержат в себе ошибки.
	Ошибки в миграциях можно отсделить по логам БД. Например, если у вас (1) сделано через docker-compose,
		то логи БД можно посмотреть, выполнив команду docker-compose logs -f

################################################################################################################################################
3) Написать скрипт, который импортирует данные из CSV в БД
Проверка будет осуществляться автоматизированно
################################################################################################################################################
4) Написать скрипт, который выведет в stdout JSON следующего формата:
{
	"hw1": "A",
	"hw2": B,
	"hw3": C,
	"hw4": "D",
	"hw5": [E]
}

где
	А - Самое популярное сочетание имя-фамилия у сотрудников
	B - К-во сотрудников, которые работают (work_city) в городе, отличном от города, к которому приписан его департамент
	C - К-во сотрудников, получающих работу больше, чем их непосредственный руководитель
	D - Название департамента, в котором самая высокая средняя з/п
	E - 2 департамента, в котором "самые различающиеся зарплаты" (самое высокое отношение M/N, где M это суммарные з/п у 10% самых высокооплачиваемых сотрудников, N - суммарные з/п самых низкооплачиваемых сотрудников)
################################################################################################################################################
5) Оптимизируйте работу скрипта:
5.1) Сделайте так, чтобы запросы работали параллельно
5.2) Посмотрите explain запросов.
	Можно ли ускорить ваши запросы с помощью индексов или изменения схемы БД?
		Если да, то добавьте индексы в таблицы/измените схему БД, оформив создание изменения как отдельную миграцию.
		Сравните полученный результат. Сообщите мне о результатах

