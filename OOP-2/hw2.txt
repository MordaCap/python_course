Напишите реализацию класса Enum, подобную существующей в Python.
Релизуйте класс Enum, который бы обладал следующими свойствами.

1.
В любом классе, унаследованном от Enum, можно было бы описать набор
атрибутов с некоторыми заданными значениями, так, чтобы атрибуты,
после декларирования класса становились бы объектами этого класса,
имеющими в свою очередь только два атрибута - name и value,
которые бы содержание имя и значение атрибута (описаного на классе)
Пример:

сlass Direction(Enum):
    north = 0
    east = 90
    south = 180
    west = 270

Direction.north  # <Direction.north: 0>
Direction.south  # <Direction.south: 180>
Direction.north.name  # north
Direction.north.value  # 0

2.
Класс позволял бы итерироваться по себе, перечисляя свои атрибуты
(они же экземпляры) в порядке декларирования.
Пример:

for d in Direction:
    print(d)

# Direction.north
# Direction.east
# Direction.south
# Direction.west

3.
При попытке инстанциировать экземпляр класса с помощью некоторого значения -
либо возвращал уже имеющийся экземпляр класса, обладающий таким значением, либо
выбрасывал ошибку.
Пример:

id(Direction.north)  # 2171479819208
id(Direction(0))  # 2171479819208

Direction(30)  # ValueError: 30 is not a valid Direction


4.
Реализуйте также часть интерфейса словаря для класса, а именно возможность
получать экземпляры (они же атрибуты) по их имени подобно получению значений
из словаря по ключу.
Пример:

Direction['west']  # <Direction.west: 270=0>
Direction['north-west']  # KeyError: 'north-west'
